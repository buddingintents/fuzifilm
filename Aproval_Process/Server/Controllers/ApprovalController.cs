using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Server.Model;
using Server.Repo;

namespace Server.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ApprovalController : ControllerBase
    {

        private readonly ILogger<ApprovalController> _logger;
        private readonly IApproval _repository;
        public ApprovalController(ILogger<ApprovalController> logger, IApproval repository)
        {
            _repository = repository;
            _logger = logger;
        }
        #region Atuthentication
        [HttpGet("UserLogin")]
        public async Task<IActionResult> Login(string Username,string Password)
        {
            try
            {
                var result = await _repository.loginUser(Username,Password);
                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while Login");
                var errorResponse = new ErrorResponse
                {
                    Message = "An error occurred while Login. Please try again later.",
                    Details = "Error While Login."
                };
                return StatusCode(500, errorResponse);
            }
        }
        #endregion Atuthentication
        #region Request Approval
        [HttpGet("GetAutoGeneratedApproval_Number")]
        public async Task<IActionResult> ApprovalBumber()
        {
            try
            {
                var res = await _repository.GetApprovalNumber();
                return Ok(res);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while retriving Auto Generated Approval Number ");
                var errorResponse = new ErrorResponse
                {
                    Message = "An error occurred while retriving Auto Generated Approval Number. Please try again later.",
                    Details = "Error while retriving Auto Generated Approval Number."
                };
                return StatusCode(500, errorResponse);
            }
        }
        [HttpPost("RequestApproval")]
        public async Task<IActionResult> RequestApproval(ViewModel_RequestApproval model)
        {
            try
            {
                var result = await _repository.RequestApproval(model);
                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while Sending Approval Request");
                var errorResponse = new ErrorResponse
                {
                    Message = "An error occurred while Sending Approval Request. Please try again later.",
                    Details = "Error while Sending Approval Request."
                };
                return StatusCode(500, errorResponse);
            }
        }
        [HttpGet("GetApprovalRequests")]
        public async Task<IActionResult> ApprovalRequests(int user_id)
        {
            try
            {

                var result = await _repository.ApprovalRequestDetails(user_id);
                return Ok(result);

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while retriving Approval Requests.");
                var errorResponse = new ErrorResponse
                {
                    Message = "An error occurred while retriving Approval Requests. Please try again later.",
                    Details = "Error while retriving Approval Requests."
                };
                return StatusCode(500, errorResponse);
            }
        }
        [HttpGet("GetApprovalRequestsStatus")]
        public async Task<IActionResult> GetApprovalRequestsStatus(int request_id=0)
        {
            try
            {

                var result = await _repository.ApprovalRequestStausDetails(request_id);
                return Ok(result);

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while retriving Approval Requests.");
                var errorResponse = new ErrorResponse
                {
                    Message = "An error occurred while retriving Approval Requests. Please try again later.",
                    Details = "Error while retriving Approval Requests."
                };
                return StatusCode(500, errorResponse);
            }
        }
        [HttpGet("ActionTaken")]
        public async Task<IActionResult> ActionTaken(int user_id, int request_id, int type,string remarks)
        {
            try
            {
                var result = await _repository.ApprovalActions(user_id,request_id,type,remarks);
                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred Performing Action");
                var errorResponse = new ErrorResponse
                {
                    Message = "An error occurred while Performing Action. Please try again later.",
                    Details = "Error While Performing Action."
                };
                return StatusCode(500, errorResponse);
            }
        }
        [HttpPost("MultiApprovalAction")]
        public async Task<IActionResult> MultiApprovalAction(List<ViewModel_MultiApproval> model)
        {
            try
            {
                List<int> responses = new List<int>();
                foreach (var item in model)
                {
                    var result = await _repository.ApprovalActions(item.user_id, item.request_id, item.type, item.commentText);
                    responses.Add(result);
                }
                return Ok(responses);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred Performing Action");
                var errorResponse = new ErrorResponse
                {
                    Message = "An error occurred while Performing Action. Please try again later.",
                    Details = "Error While Performing Action."
                };
                return StatusCode(500, errorResponse);
            }
        }
        #endregion Request Approval
    }
}
